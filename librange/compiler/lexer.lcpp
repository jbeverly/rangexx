/*
 * This file is part of range++.
 *
 * range++ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * range++ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with range++.  If not, see <http://www.gnu.org/licenses/>.
 */

%namespace "rangecompiler"
%class-name "RangeScanner_v1"
%filenames "RangeScanner_v1"
%lex-source "RangeScanner_v1.cpp"
%input-interface "scanner_input.h.in"
%input-implementation "scanner_input.cpp.in"

%x squotedstring
%x dquotedstring
%x regex
%x escape
%x setoperation
%x bareword

%%

[\ \t\n\r]+                         /* skip */

<escape>{
    .                               {
                                        more();
                                        begin(statestack.top());
                                        statestack.pop();
                                    }
}

"/"                                 { begin(StartCondition__::regex); }

<regex>{
    "\\"                            { 
                                        discard(1);
                                        statestack.push(StartCondition__::regex);
                                        begin(StartCondition__::escape);
                                    }
    "/"                             { 
                                        discard(1);
                                        begin(StartCondition__::INITIAL);
                                        return RangeParser_v1::REGEX;
                                    }
    .                               { more(); }
}

"\""                                { begin(StartCondition__::dquotedstring); }

<dquotedstring>{
    \\                              { 
                                        discard(1);
                                        statestack.push(StartCondition__::dquotedstring);
                                        begin(StartCondition__::escape);
                                    }
    "\""                            { 
                                        discard(1);
                                        begin(StartCondition__::INITIAL);
                                        return RangeParser_v1::DOUBLEQUOTED;
                                    }
    .                               { more(); }
}

"'"                                 { begin(StartCondition__::squotedstring); }

<squotedstring>{
    "\\"                            {
                                        discard(1);
                                        statestack.push(StartCondition__::squotedstring);
                                        begin(StartCondition__::escape);
                                    }
    "'"                             { 
                                        discard(1);
                                        begin(StartCondition__::INITIAL);
                                        return RangeParser_v1::SINGLEQUOTED;
                                    }
    .                               { more(); }
}

","                                 { begin(StartCondition__::setoperation); }

<setoperation>{
    "-"                             { begin(StartCondition__::INITIAL); return '-'; }
    "&"                             { begin(StartCondition__::INITIAL); return '&'; }
    .                               { redo(1); begin(StartCondition__::INITIAL); return ','; }
}

".."                                { return RangeParser_v1::SEQUENCE; }

[a-zA-Z0-9_#]                       { 
                                        more();
                                        begin(StartCondition__::bareword);
                                    }
<bareword>{
    [a-zA-Z0-9_\-#]                 { more(); }
    ".."                            { 
                                        redo(2);
                                        begin(StartCondition__::INITIAL);
                                        auto it = function_st_->find(matched());
                                        if (it != function_st_->end()) {
                                            return RangeParser_v1::FUNCTION;
                                        }
                                        return RangeParser_v1::BAREWORD;
                                    }
    "."                             { more(); }
    .                               {
                                        redo(1);
                                        begin(StartCondition__::INITIAL);
                                        auto it = function_st_->find(matched());
                                        if (it != function_st_->end()) {
                                            return RangeParser_v1::FUNCTION;
                                        }
                                        return RangeParser_v1::BAREWORD;
                                    }
     <<EOF>>                        {
                                        begin(StartCondition__::INITIAL);
                                        auto it = function_st_->find(matched());
                                        if (it != function_st_->end()) {
                                            return RangeParser_v1::FUNCTION;
                                        }
                                        return RangeParser_v1::BAREWORD;
                                    }
}

    
[!\-&^;:*%(){}]                     { return matched()[0]; }

