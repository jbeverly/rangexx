// Generated by Flexc++ V2.01.00 on Wed, 30 Apr 2014 04:18:01 +0400

#ifndef rangecompilerRangeScanner_H_INCLUDED_
#define rangecompilerRangeScanner_H_INCLUDED_

// $insert baseclass_h
#include "compiler_types.h"

#include "RangeScannerbase.h"

// $insert namespace-open
namespace rangecompiler
{

// $insert classHead
class RangeScanner: public RangeScannerBase
{
    public:
        explicit RangeScanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        RangeScanner(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();
        ::range::compiler::range_function_sp_t function(const std::string& name);

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline RangeScanner::RangeScanner(std::istream &in, std::ostream &out)
:
    RangeScannerBase(in, out)
{}

inline RangeScanner::RangeScanner(std::string const &infile, std::string const &outfile)
:
    RangeScannerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int RangeScanner::lex()
{
    return lex__();
}

inline void RangeScanner::preCode() 
{
    // optionally replace by your own code
}

#define UNUSED(x) (void)(x)
inline void RangeScanner::postCode(PostEnum__ type) 
{
    UNUSED(type);
    // optionally replace by your own code
}

inline void RangeScanner::print() 
{
    print__();
}

// $insert namespace-close
}

#endif // RangeScanner_H_INCLUDED_

