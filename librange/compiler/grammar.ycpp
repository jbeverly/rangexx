/*
 * This file is part of range++.
 *
 * range++ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * range++ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with range++.  If not, see <http://www.gnu.org/licenses/>.
 */

/* This bison/yacc-like grammar is for use with bisonc++ */

%namespace rangecompiler
%class-name RangeParser
%baseclass-preinclude "ast.h"
%parsefun-source RangeParser_parse.cpp

%scanner RangeScanner.h
%scanner-token-function d_scanner.lex()

%stype ::range::compiler::ast::ASTNode

%start start

%token FUNCTION
%token BAREWORD
%token REGEX
%token SINGLEQUOTED
%token DOUBLEQUOTED

%right ':'
%left ','
%left '-'
%left '&'
%left '(' ')'
%left '{' '}'
%nonassoc SEQUENCE

%%

keyexpand:
    expr ':' word
    { 
        $$ = range::compiler::ast::ASTKeyExpand($1, $3);
    };

union:
    expr ',' expr
    {
        $$ = range::compiler::ast::ASTUnion($1, $3);
    };

difference:
    expr '-' expr
    {
        $$ = range::compiler::ast::ASTDifference($1, $3);
    };

intersection:
    expr '&' expr
    {
        $$ = range::compiler::ast::ASTIntersection($1, $3);
    };

sequence:
    expr SEQUENCE expr
    {
        $$ = range::compiler::ast::ASTSequence($1, $3);
    };

expand:
    '%' expr
    {
        $$ = range::compiler::ast::ASTExpand($2);
    };

get_cluster:
    '*' expr
    {
        $$ = range::compiler::ast::ASTGetCluster($2);
    };

admin:
    '^' expr
    {
        $$ = range::compiler::ast::ASTAdmin($2);
    };


group:
    '(' expr ')'
    {
        $$ = range::compiler::ast::ASTGroup($2);
    };

braceexpand:
    expr '{' expr '}' expr
    {
        $$ = range::compiler::ast::ASTBraceExpand($1, $3, $5);
    };

function_arguments:
    expr
    {
        $$ = range::compiler::ast::ASTFunctionArguments($1);
    }
    | function_arguments ';' expr
    {
        boost::get<range::compiler::ast::ASTFunctionArguments>($1).push_back($3);
        $$ = $1;
    };

// We'll treat a function as just a word until proven that it is being used as a function (followed by '(' ... ')')
function_name:
    FUNCTION
    {
        $$ = range::compiler::ast::ASTWord(d_scanner.matched());
    };
    
// If it is being used as a function, we'll discard the ASTWord from the tree, and replace it with an ASTFunction
function:
    function_name '(' function_arguments ')'
    {
        auto w = boost::get<range::compiler::ast::ASTWord>($1);
        $$ = range::compiler::ast::ASTFunction(d_scanner.function(w.word), $3);
    };

word:
        BAREWORD
    {
        $$ = range::compiler::ast::ASTWord(d_scanner.matched());
    };

literal: 
        SINGLEQUOTED
    |   DOUBLEQUOTED
    {
        $$ = range::compiler::ast::ASTLiteral(d_scanner.matched());
    };

regex:
    REGEX
    {
        $$ = range::compiler::ast::ASTRegex(d_scanner.matched());
    }
    '!' REGEX
    {
        $$ = range::compiler::ast::ASTRegex(d_scanner.matched(), false);
    };

null:
    {
        $$ = range::compiler::ast::ASTNull();
    };

expr:
        regex
    |   literal
    |   function_name
    |   word
    |   sequence
    |   group
    |   union
    |   difference
    |   intersection
    |   braceexpand
    |   keyexpand
    |   expand
    |   admin
    |   get_cluster
    |   function
    |   null;

start:
    expr
    {
        ast_ = $1;
    };
