// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adjacency_list.proto

#ifndef PROTOBUF_adjacency_5flist_2eproto__INCLUDED
#define PROTOBUF_adjacency_5flist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace range {
namespace db {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_adjacency_5flist_2eproto();
void protobuf_AssignDesc_adjacency_5flist_2eproto();
void protobuf_ShutdownFile_adjacency_5flist_2eproto();

class AdjacencyLists;
class AdjacencyLists_Adjacency;
class AdjacencyLists_Edges;

// ===================================================================

class AdjacencyLists_Adjacency : public ::google::protobuf::Message {
 public:
  AdjacencyLists_Adjacency();
  virtual ~AdjacencyLists_Adjacency();

  AdjacencyLists_Adjacency(const AdjacencyLists_Adjacency& from);

  inline AdjacencyLists_Adjacency& operator=(const AdjacencyLists_Adjacency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdjacencyLists_Adjacency& default_instance();

  void Swap(AdjacencyLists_Adjacency* other);

  // implements Message ----------------------------------------------

  AdjacencyLists_Adjacency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdjacencyLists_Adjacency& from);
  void MergeFrom(const AdjacencyLists_Adjacency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:range.db.AdjacencyLists.Adjacency)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_adjacency_5flist_2eproto();
  friend void protobuf_AssignDesc_adjacency_5flist_2eproto();
  friend void protobuf_ShutdownFile_adjacency_5flist_2eproto();

  void InitAsDefaultInstance();
  static AdjacencyLists_Adjacency* default_instance_;
};
// -------------------------------------------------------------------

class AdjacencyLists_Edges : public ::google::protobuf::Message {
 public:
  AdjacencyLists_Edges();
  virtual ~AdjacencyLists_Edges();

  AdjacencyLists_Edges(const AdjacencyLists_Edges& from);

  inline AdjacencyLists_Edges& operator=(const AdjacencyLists_Edges& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdjacencyLists_Edges& default_instance();

  void Swap(AdjacencyLists_Edges* other);

  // implements Message ----------------------------------------------

  AdjacencyLists_Edges* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdjacencyLists_Edges& from);
  void MergeFrom(const AdjacencyLists_Edges& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .range.db.AdjacencyLists.Adjacency edges = 1;
  inline int edges_size() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 1;
  inline const ::range::db::AdjacencyLists_Adjacency& edges(int index) const;
  inline ::range::db::AdjacencyLists_Adjacency* mutable_edges(int index);
  inline ::range::db::AdjacencyLists_Adjacency* add_edges();
  inline const ::google::protobuf::RepeatedPtrField< ::range::db::AdjacencyLists_Adjacency >&
      edges() const;
  inline ::google::protobuf::RepeatedPtrField< ::range::db::AdjacencyLists_Adjacency >*
      mutable_edges();

  // @@protoc_insertion_point(class_scope:range.db.AdjacencyLists.Edges)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::range::db::AdjacencyLists_Adjacency > edges_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_adjacency_5flist_2eproto();
  friend void protobuf_AssignDesc_adjacency_5flist_2eproto();
  friend void protobuf_ShutdownFile_adjacency_5flist_2eproto();

  void InitAsDefaultInstance();
  static AdjacencyLists_Edges* default_instance_;
};
// -------------------------------------------------------------------

class AdjacencyLists : public ::google::protobuf::Message {
 public:
  AdjacencyLists();
  virtual ~AdjacencyLists();

  AdjacencyLists(const AdjacencyLists& from);

  inline AdjacencyLists& operator=(const AdjacencyLists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdjacencyLists& default_instance();

  void Swap(AdjacencyLists* other);

  // implements Message ----------------------------------------------

  AdjacencyLists* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdjacencyLists& from);
  void MergeFrom(const AdjacencyLists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdjacencyLists_Adjacency Adjacency;
  typedef AdjacencyLists_Edges Edges;

  // accessors -------------------------------------------------------

  // required .range.db.AdjacencyLists.Edges forwardEdges = 1;
  inline bool has_forwardedges() const;
  inline void clear_forwardedges();
  static const int kForwardEdgesFieldNumber = 1;
  inline const ::range::db::AdjacencyLists_Edges& forwardedges() const;
  inline ::range::db::AdjacencyLists_Edges* mutable_forwardedges();
  inline ::range::db::AdjacencyLists_Edges* release_forwardedges();
  inline void set_allocated_forwardedges(::range::db::AdjacencyLists_Edges* forwardedges);

  // required .range.db.AdjacencyLists.Edges reverseEdges = 2;
  inline bool has_reverseedges() const;
  inline void clear_reverseedges();
  static const int kReverseEdgesFieldNumber = 2;
  inline const ::range::db::AdjacencyLists_Edges& reverseedges() const;
  inline ::range::db::AdjacencyLists_Edges* mutable_reverseedges();
  inline ::range::db::AdjacencyLists_Edges* release_reverseedges();
  inline void set_allocated_reverseedges(::range::db::AdjacencyLists_Edges* reverseedges);

  // @@protoc_insertion_point(class_scope:range.db.AdjacencyLists)
 private:
  inline void set_has_forwardedges();
  inline void clear_has_forwardedges();
  inline void set_has_reverseedges();
  inline void clear_has_reverseedges();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::range::db::AdjacencyLists_Edges* forwardedges_;
  ::range::db::AdjacencyLists_Edges* reverseedges_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_adjacency_5flist_2eproto();
  friend void protobuf_AssignDesc_adjacency_5flist_2eproto();
  friend void protobuf_ShutdownFile_adjacency_5flist_2eproto();

  void InitAsDefaultInstance();
  static AdjacencyLists* default_instance_;
};
// ===================================================================


// ===================================================================

// AdjacencyLists_Adjacency

// required string id = 1;
inline bool AdjacencyLists_Adjacency::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdjacencyLists_Adjacency::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdjacencyLists_Adjacency::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdjacencyLists_Adjacency::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AdjacencyLists_Adjacency::id() const {
  return *id_;
}
inline void AdjacencyLists_Adjacency::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AdjacencyLists_Adjacency::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AdjacencyLists_Adjacency::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdjacencyLists_Adjacency::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* AdjacencyLists_Adjacency::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdjacencyLists_Adjacency::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdjacencyLists_Edges

// repeated .range.db.AdjacencyLists.Adjacency edges = 1;
inline int AdjacencyLists_Edges::edges_size() const {
  return edges_.size();
}
inline void AdjacencyLists_Edges::clear_edges() {
  edges_.Clear();
}
inline const ::range::db::AdjacencyLists_Adjacency& AdjacencyLists_Edges::edges(int index) const {
  return edges_.Get(index);
}
inline ::range::db::AdjacencyLists_Adjacency* AdjacencyLists_Edges::mutable_edges(int index) {
  return edges_.Mutable(index);
}
inline ::range::db::AdjacencyLists_Adjacency* AdjacencyLists_Edges::add_edges() {
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::range::db::AdjacencyLists_Adjacency >&
AdjacencyLists_Edges::edges() const {
  return edges_;
}
inline ::google::protobuf::RepeatedPtrField< ::range::db::AdjacencyLists_Adjacency >*
AdjacencyLists_Edges::mutable_edges() {
  return &edges_;
}

// -------------------------------------------------------------------

// AdjacencyLists

// required .range.db.AdjacencyLists.Edges forwardEdges = 1;
inline bool AdjacencyLists::has_forwardedges() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdjacencyLists::set_has_forwardedges() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdjacencyLists::clear_has_forwardedges() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdjacencyLists::clear_forwardedges() {
  if (forwardedges_ != NULL) forwardedges_->::range::db::AdjacencyLists_Edges::Clear();
  clear_has_forwardedges();
}
inline const ::range::db::AdjacencyLists_Edges& AdjacencyLists::forwardedges() const {
  return forwardedges_ != NULL ? *forwardedges_ : *default_instance_->forwardedges_;
}
inline ::range::db::AdjacencyLists_Edges* AdjacencyLists::mutable_forwardedges() {
  set_has_forwardedges();
  if (forwardedges_ == NULL) forwardedges_ = new ::range::db::AdjacencyLists_Edges;
  return forwardedges_;
}
inline ::range::db::AdjacencyLists_Edges* AdjacencyLists::release_forwardedges() {
  clear_has_forwardedges();
  ::range::db::AdjacencyLists_Edges* temp = forwardedges_;
  forwardedges_ = NULL;
  return temp;
}
inline void AdjacencyLists::set_allocated_forwardedges(::range::db::AdjacencyLists_Edges* forwardedges) {
  delete forwardedges_;
  forwardedges_ = forwardedges;
  if (forwardedges) {
    set_has_forwardedges();
  } else {
    clear_has_forwardedges();
  }
}

// required .range.db.AdjacencyLists.Edges reverseEdges = 2;
inline bool AdjacencyLists::has_reverseedges() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdjacencyLists::set_has_reverseedges() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdjacencyLists::clear_has_reverseedges() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdjacencyLists::clear_reverseedges() {
  if (reverseedges_ != NULL) reverseedges_->::range::db::AdjacencyLists_Edges::Clear();
  clear_has_reverseedges();
}
inline const ::range::db::AdjacencyLists_Edges& AdjacencyLists::reverseedges() const {
  return reverseedges_ != NULL ? *reverseedges_ : *default_instance_->reverseedges_;
}
inline ::range::db::AdjacencyLists_Edges* AdjacencyLists::mutable_reverseedges() {
  set_has_reverseedges();
  if (reverseedges_ == NULL) reverseedges_ = new ::range::db::AdjacencyLists_Edges;
  return reverseedges_;
}
inline ::range::db::AdjacencyLists_Edges* AdjacencyLists::release_reverseedges() {
  clear_has_reverseedges();
  ::range::db::AdjacencyLists_Edges* temp = reverseedges_;
  reverseedges_ = NULL;
  return temp;
}
inline void AdjacencyLists::set_allocated_reverseedges(::range::db::AdjacencyLists_Edges* reverseedges) {
  delete reverseedges_;
  reverseedges_ = reverseedges;
  if (reverseedges) {
    set_has_reverseedges();
  } else {
    clear_has_reverseedges();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace range

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_adjacency_5flist_2eproto__INCLUDED
