// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: changelist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "changelist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace range {
namespace db {

namespace {

const ::google::protobuf::Descriptor* ChangeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeList_Change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeList_Change_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeList_Change_TimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeList_Change_TimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeList_Change_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeList_Change_Item_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_changelist_2eproto() {
  protobuf_AddDesc_changelist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "changelist.proto");
  GOOGLE_CHECK(file != NULL);
  ChangeList_descriptor_ = file->message_type(0);
  static const int ChangeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList, current_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList, change_),
  };
  ChangeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeList_descriptor_,
      ChangeList::default_instance_,
      ChangeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeList));
  ChangeList_Change_descriptor_ = ChangeList_descriptor_->nested_type(0);
  static const int ChangeList_Change_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change, items_),
  };
  ChangeList_Change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeList_Change_descriptor_,
      ChangeList_Change::default_instance_,
      ChangeList_Change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeList_Change));
  ChangeList_Change_TimeStamp_descriptor_ = ChangeList_Change_descriptor_->nested_type(0);
  static const int ChangeList_Change_TimeStamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_TimeStamp, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_TimeStamp, msec_),
  };
  ChangeList_Change_TimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeList_Change_TimeStamp_descriptor_,
      ChangeList_Change_TimeStamp::default_instance_,
      ChangeList_Change_TimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_TimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_TimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeList_Change_TimeStamp));
  ChangeList_Change_Item_descriptor_ = ChangeList_Change_descriptor_->nested_type(1);
  static const int ChangeList_Change_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_Item, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_Item, version_),
  };
  ChangeList_Change_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeList_Change_Item_descriptor_,
      ChangeList_Change_Item::default_instance_,
      ChangeList_Change_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeList_Change_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeList_Change_Item));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_changelist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeList_descriptor_, &ChangeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeList_Change_descriptor_, &ChangeList_Change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeList_Change_TimeStamp_descriptor_, &ChangeList_Change_TimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeList_Change_Item_descriptor_, &ChangeList_Change_Item::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_changelist_2eproto() {
  delete ChangeList::default_instance_;
  delete ChangeList_reflection_;
  delete ChangeList_Change::default_instance_;
  delete ChangeList_Change_reflection_;
  delete ChangeList_Change_TimeStamp::default_instance_;
  delete ChangeList_Change_TimeStamp_reflection_;
  delete ChangeList_Change_Item::default_instance_;
  delete ChangeList_Change_Item_reflection_;
}

void protobuf_AddDesc_changelist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020changelist.proto\022\010range.db\"\232\002\n\nChangeL"
    "ist\022\027\n\017current_version\030\001 \002(\004\022+\n\006change\030\002"
    " \003(\0132\033.range.db.ChangeList.Change\032\305\001\n\006Ch"
    "ange\0228\n\ttimestamp\030\001 \002(\0132%.range.db.Chang"
    "eList.Change.TimeStamp\022/\n\005items\030\002 \003(\0132 ."
    "range.db.ChangeList.Change.Item\032*\n\tTimeS"
    "tamp\022\017\n\007seconds\030\001 \002(\004\022\014\n\004msec\030\002 \002(\r\032$\n\004I"
    "tem\022\013\n\003key\030\001 \002(\t\022\017\n\007version\030\002 \002(\004", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "changelist.proto", &protobuf_RegisterTypes);
  ChangeList::default_instance_ = new ChangeList();
  ChangeList_Change::default_instance_ = new ChangeList_Change();
  ChangeList_Change_TimeStamp::default_instance_ = new ChangeList_Change_TimeStamp();
  ChangeList_Change_Item::default_instance_ = new ChangeList_Change_Item();
  ChangeList::default_instance_->InitAsDefaultInstance();
  ChangeList_Change::default_instance_->InitAsDefaultInstance();
  ChangeList_Change_TimeStamp::default_instance_->InitAsDefaultInstance();
  ChangeList_Change_Item::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_changelist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_changelist_2eproto {
  StaticDescriptorInitializer_changelist_2eproto() {
    protobuf_AddDesc_changelist_2eproto();
  }
} static_descriptor_initializer_changelist_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChangeList_Change_TimeStamp::kSecondsFieldNumber;
const int ChangeList_Change_TimeStamp::kMsecFieldNumber;
#endif  // !_MSC_VER

ChangeList_Change_TimeStamp::ChangeList_Change_TimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeList_Change_TimeStamp::InitAsDefaultInstance() {
}

ChangeList_Change_TimeStamp::ChangeList_Change_TimeStamp(const ChangeList_Change_TimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeList_Change_TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = GOOGLE_ULONGLONG(0);
  msec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeList_Change_TimeStamp::~ChangeList_Change_TimeStamp() {
  SharedDtor();
}

void ChangeList_Change_TimeStamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeList_Change_TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeList_Change_TimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeList_Change_TimeStamp_descriptor_;
}

const ChangeList_Change_TimeStamp& ChangeList_Change_TimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changelist_2eproto();
  return *default_instance_;
}

ChangeList_Change_TimeStamp* ChangeList_Change_TimeStamp::default_instance_ = NULL;

ChangeList_Change_TimeStamp* ChangeList_Change_TimeStamp::New() const {
  return new ChangeList_Change_TimeStamp;
}

void ChangeList_Change_TimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_ = GOOGLE_ULONGLONG(0);
    msec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeList_Change_TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msec;
        break;
      }

      // required uint32 msec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_)));
          set_has_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeList_Change_TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seconds(), output);
  }

  // required uint32 msec = 2;
  if (has_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeList_Change_TimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seconds(), target);
  }

  // required uint32 msec = 2;
  if (has_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeList_Change_TimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seconds());
    }

    // required uint32 msec = 2;
    if (has_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeList_Change_TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeList_Change_TimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeList_Change_TimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeList_Change_TimeStamp::MergeFrom(const ChangeList_Change_TimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_msec()) {
      set_msec(from.msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeList_Change_TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeList_Change_TimeStamp::CopyFrom(const ChangeList_Change_TimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeList_Change_TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeList_Change_TimeStamp::Swap(ChangeList_Change_TimeStamp* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(msec_, other->msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeList_Change_TimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeList_Change_TimeStamp_descriptor_;
  metadata.reflection = ChangeList_Change_TimeStamp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChangeList_Change_Item::kKeyFieldNumber;
const int ChangeList_Change_Item::kVersionFieldNumber;
#endif  // !_MSC_VER

ChangeList_Change_Item::ChangeList_Change_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeList_Change_Item::InitAsDefaultInstance() {
}

ChangeList_Change_Item::ChangeList_Change_Item(const ChangeList_Change_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeList_Change_Item::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeList_Change_Item::~ChangeList_Change_Item() {
  SharedDtor();
}

void ChangeList_Change_Item::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ChangeList_Change_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeList_Change_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeList_Change_Item_descriptor_;
}

const ChangeList_Change_Item& ChangeList_Change_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changelist_2eproto();
  return *default_instance_;
}

ChangeList_Change_Item* ChangeList_Change_Item::default_instance_ = NULL;

ChangeList_Change_Item* ChangeList_Change_Item::New() const {
  return new ChangeList_Change_Item;
}

void ChangeList_Change_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeList_Change_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeList_Change_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeList_Change_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeList_Change_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeList_Change_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeList_Change_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeList_Change_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeList_Change_Item::MergeFrom(const ChangeList_Change_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeList_Change_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeList_Change_Item::CopyFrom(const ChangeList_Change_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeList_Change_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeList_Change_Item::Swap(ChangeList_Change_Item* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeList_Change_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeList_Change_Item_descriptor_;
  metadata.reflection = ChangeList_Change_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChangeList_Change::kTimestampFieldNumber;
const int ChangeList_Change::kItemsFieldNumber;
#endif  // !_MSC_VER

ChangeList_Change::ChangeList_Change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeList_Change::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::range::db::ChangeList_Change_TimeStamp*>(&::range::db::ChangeList_Change_TimeStamp::default_instance());
}

ChangeList_Change::ChangeList_Change(const ChangeList_Change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeList_Change::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeList_Change::~ChangeList_Change() {
  SharedDtor();
}

void ChangeList_Change::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void ChangeList_Change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeList_Change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeList_Change_descriptor_;
}

const ChangeList_Change& ChangeList_Change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changelist_2eproto();
  return *default_instance_;
}

ChangeList_Change* ChangeList_Change::default_instance_ = NULL;

ChangeList_Change* ChangeList_Change::New() const {
  return new ChangeList_Change;
}

void ChangeList_Change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::range::db::ChangeList_Change_TimeStamp::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeList_Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .range.db.ChangeList.Change.TimeStamp timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .range.db.ChangeList.Change.Item items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeList_Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .range.db.ChangeList.Change.TimeStamp timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }

  // repeated .range.db.ChangeList.Change.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeList_Change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .range.db.ChangeList.Change.TimeStamp timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }

  // repeated .range.db.ChangeList.Change.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeList_Change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .range.db.ChangeList.Change.TimeStamp timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

  }
  // repeated .range.db.ChangeList.Change.Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeList_Change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeList_Change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeList_Change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeList_Change::MergeFrom(const ChangeList_Change& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::range::db::ChangeList_Change_TimeStamp::MergeFrom(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeList_Change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeList_Change::CopyFrom(const ChangeList_Change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeList_Change::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeList_Change::Swap(ChangeList_Change* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeList_Change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeList_Change_descriptor_;
  metadata.reflection = ChangeList_Change_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChangeList::kCurrentVersionFieldNumber;
const int ChangeList::kChangeFieldNumber;
#endif  // !_MSC_VER

ChangeList::ChangeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeList::InitAsDefaultInstance() {
}

ChangeList::ChangeList(const ChangeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeList::SharedCtor() {
  _cached_size_ = 0;
  current_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeList::~ChangeList() {
  SharedDtor();
}

void ChangeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeList_descriptor_;
}

const ChangeList& ChangeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changelist_2eproto();
  return *default_instance_;
}

ChangeList* ChangeList::default_instance_ = NULL;

ChangeList* ChangeList::New() const {
  return new ChangeList;
}

void ChangeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_version_ = GOOGLE_ULONGLONG(0);
  }
  change_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 current_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_version_)));
          set_has_current_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_change;
        break;
      }

      // repeated .range.db.ChangeList.Change change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_change;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 current_version = 1;
  if (has_current_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->current_version(), output);
  }

  // repeated .range.db.ChangeList.Change change = 2;
  for (int i = 0; i < this->change_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->change(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 current_version = 1;
  if (has_current_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->current_version(), target);
  }

  // repeated .range.db.ChangeList.Change change = 2;
  for (int i = 0; i < this->change_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->change(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 current_version = 1;
    if (has_current_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_version());
    }

  }
  // repeated .range.db.ChangeList.Change change = 2;
  total_size += 1 * this->change_size();
  for (int i = 0; i < this->change_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->change(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeList::MergeFrom(const ChangeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  change_.MergeFrom(from.change_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_version()) {
      set_current_version(from.current_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeList::CopyFrom(const ChangeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < change_size(); i++) {
    if (!this->change(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeList::Swap(ChangeList* other) {
  if (other != this) {
    std::swap(current_version_, other->current_version_);
    change_.Swap(&other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeList_descriptor_;
  metadata.reflection = ChangeList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace range

// @@protoc_insertion_point(global_scope)
