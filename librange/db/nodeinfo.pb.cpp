// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodeinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nodeinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace range {
namespace db {

namespace {

const ::google::protobuf::Descriptor* NodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_Adjacency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_Adjacency_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_Edges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_Edges_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_Tags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_Tags_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_Tags_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_Tags_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_Tags_KeyValue_Values_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_Tags_KeyValue_Values_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_Tags_KeyValue_ListToVersionMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_Tags_KeyValue_ListToVersionMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nodeinfo_2eproto() {
  protobuf_AddDesc_nodeinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nodeinfo.proto");
  GOOGLE_CHECK(file != NULL);
  NodeInfo_descriptor_ = file->message_type(0);
  static const int NodeInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, list_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, crc32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, graph_versions_),
  };
  NodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_descriptor_,
      NodeInfo::default_instance_,
      NodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo));
  NodeInfo_Adjacency_descriptor_ = NodeInfo_descriptor_->nested_type(0);
  static const int NodeInfo_Adjacency_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Adjacency, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Adjacency, versions_),
  };
  NodeInfo_Adjacency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_Adjacency_descriptor_,
      NodeInfo_Adjacency::default_instance_,
      NodeInfo_Adjacency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Adjacency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Adjacency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo_Adjacency));
  NodeInfo_Edges_descriptor_ = NodeInfo_descriptor_->nested_type(1);
  static const int NodeInfo_Edges_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Edges, edges_),
  };
  NodeInfo_Edges_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_Edges_descriptor_,
      NodeInfo_Edges::default_instance_,
      NodeInfo_Edges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Edges, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Edges, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo_Edges));
  NodeInfo_Tags_descriptor_ = NodeInfo_descriptor_->nested_type(2);
  static const int NodeInfo_Tags_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags, keys_),
  };
  NodeInfo_Tags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_Tags_descriptor_,
      NodeInfo_Tags::default_instance_,
      NodeInfo_Tags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo_Tags));
  NodeInfo_Tags_KeyValue_descriptor_ = NodeInfo_Tags_descriptor_->nested_type(0);
  static const int NodeInfo_Tags_KeyValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, key_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, versionmap_),
  };
  NodeInfo_Tags_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_Tags_KeyValue_descriptor_,
      NodeInfo_Tags_KeyValue::default_instance_,
      NodeInfo_Tags_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo_Tags_KeyValue));
  NodeInfo_Tags_KeyValue_Values_descriptor_ = NodeInfo_Tags_KeyValue_descriptor_->nested_type(0);
  static const int NodeInfo_Tags_KeyValue_Values_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_Values, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_Values, versions_),
  };
  NodeInfo_Tags_KeyValue_Values_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_Tags_KeyValue_Values_descriptor_,
      NodeInfo_Tags_KeyValue_Values::default_instance_,
      NodeInfo_Tags_KeyValue_Values_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_Values, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_Values, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo_Tags_KeyValue_Values));
  NodeInfo_Tags_KeyValue_ListToVersionMap_descriptor_ = NodeInfo_Tags_KeyValue_descriptor_->nested_type(1);
  static const int NodeInfo_Tags_KeyValue_ListToVersionMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_ListToVersionMap, list_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_ListToVersionMap, key_version_),
  };
  NodeInfo_Tags_KeyValue_ListToVersionMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_Tags_KeyValue_ListToVersionMap_descriptor_,
      NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance_,
      NodeInfo_Tags_KeyValue_ListToVersionMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_ListToVersionMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo_Tags_KeyValue_ListToVersionMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo_Tags_KeyValue_ListToVersionMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nodeinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_descriptor_, &NodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_Adjacency_descriptor_, &NodeInfo_Adjacency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_Edges_descriptor_, &NodeInfo_Edges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_Tags_descriptor_, &NodeInfo_Tags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_Tags_KeyValue_descriptor_, &NodeInfo_Tags_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_Tags_KeyValue_Values_descriptor_, &NodeInfo_Tags_KeyValue_Values::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_Tags_KeyValue_ListToVersionMap_descriptor_, &NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nodeinfo_2eproto() {
  delete NodeInfo::default_instance_;
  delete NodeInfo_reflection_;
  delete NodeInfo_Adjacency::default_instance_;
  delete NodeInfo_Adjacency_reflection_;
  delete NodeInfo_Edges::default_instance_;
  delete NodeInfo_Edges_reflection_;
  delete NodeInfo_Tags::default_instance_;
  delete NodeInfo_Tags_reflection_;
  delete NodeInfo_Tags_KeyValue::default_instance_;
  delete NodeInfo_Tags_KeyValue_reflection_;
  delete NodeInfo_Tags_KeyValue_Values::default_instance_;
  delete NodeInfo_Tags_KeyValue_Values_reflection_;
  delete NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance_;
  delete NodeInfo_Tags_KeyValue_ListToVersionMap_reflection_;
}

void protobuf_AddDesc_nodeinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016nodeinfo.proto\022\010range.db\"\233\005\n\010NodeInfo\022"
    "\024\n\014list_version\030\001 \002(\004\022\r\n\005crc32\030\002 \002(\r\022\021\n\t"
    "node_type\030\003 \002(\r\022)\n\007forward\030\004 \002(\0132\030.range"
    ".db.NodeInfo.Edges\022)\n\007reverse\030\005 \002(\0132\030.ra"
    "nge.db.NodeInfo.Edges\022%\n\004tags\030\006 \002(\0132\027.ra"
    "nge.db.NodeInfo.Tags\022\026\n\016graph_versions\030\007"
    " \003(\004\032)\n\tAdjacency\022\n\n\002id\030\001 \002(\t\022\020\n\010version"
    "s\030\002 \003(\004\0324\n\005Edges\022+\n\005edges\030\001 \003(\0132\034.range."
    "db.NodeInfo.Adjacency\032\340\002\n\004Tags\022.\n\004keys\030\001"
    " \003(\0132 .range.db.NodeInfo.Tags.KeyValue\032\247"
    "\002\n\010KeyValue\022\013\n\003key\030\001 \002(\t\022\023\n\013key_version\030"
    "\002 \002(\004\0227\n\006values\030\003 \003(\0132\'.range.db.NodeInf"
    "o.Tags.KeyValue.Values\022\020\n\010versions\030\004 \003(\004"
    "\022E\n\nversionmap\030\005 \003(\01321.range.db.NodeInfo"
    ".Tags.KeyValue.ListToVersionMap\032(\n\006Value"
    "s\022\014\n\004data\030\001 \002(\t\022\020\n\010versions\030\002 \003(\004\032=\n\020Lis"
    "tToVersionMap\022\024\n\014list_version\030\001 \002(\004\022\023\n\013k"
    "ey_version\030\002 \002(\004", 696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nodeinfo.proto", &protobuf_RegisterTypes);
  NodeInfo::default_instance_ = new NodeInfo();
  NodeInfo_Adjacency::default_instance_ = new NodeInfo_Adjacency();
  NodeInfo_Edges::default_instance_ = new NodeInfo_Edges();
  NodeInfo_Tags::default_instance_ = new NodeInfo_Tags();
  NodeInfo_Tags_KeyValue::default_instance_ = new NodeInfo_Tags_KeyValue();
  NodeInfo_Tags_KeyValue_Values::default_instance_ = new NodeInfo_Tags_KeyValue_Values();
  NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance_ = new NodeInfo_Tags_KeyValue_ListToVersionMap();
  NodeInfo::default_instance_->InitAsDefaultInstance();
  NodeInfo_Adjacency::default_instance_->InitAsDefaultInstance();
  NodeInfo_Edges::default_instance_->InitAsDefaultInstance();
  NodeInfo_Tags::default_instance_->InitAsDefaultInstance();
  NodeInfo_Tags_KeyValue::default_instance_->InitAsDefaultInstance();
  NodeInfo_Tags_KeyValue_Values::default_instance_->InitAsDefaultInstance();
  NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nodeinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nodeinfo_2eproto {
  StaticDescriptorInitializer_nodeinfo_2eproto() {
    protobuf_AddDesc_nodeinfo_2eproto();
  }
} static_descriptor_initializer_nodeinfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NodeInfo_Adjacency::kIdFieldNumber;
const int NodeInfo_Adjacency::kVersionsFieldNumber;
#endif  // !_MSC_VER

NodeInfo_Adjacency::NodeInfo_Adjacency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo_Adjacency::InitAsDefaultInstance() {
}

NodeInfo_Adjacency::NodeInfo_Adjacency(const NodeInfo_Adjacency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo_Adjacency::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo_Adjacency::~NodeInfo_Adjacency() {
  SharedDtor();
}

void NodeInfo_Adjacency::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void NodeInfo_Adjacency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo_Adjacency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_Adjacency_descriptor_;
}

const NodeInfo_Adjacency& NodeInfo_Adjacency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo_Adjacency* NodeInfo_Adjacency::default_instance_ = NULL;

NodeInfo_Adjacency* NodeInfo_Adjacency::New() const {
  return new NodeInfo_Adjacency;
}

void NodeInfo_Adjacency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo_Adjacency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_versions;
        break;
      }

      // repeated uint64 versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_versions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_versions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_versions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo_Adjacency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated uint64 versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo_Adjacency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated uint64 versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo_Adjacency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated uint64 versions = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->versions(i));
    }
    total_size += 1 * this->versions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo_Adjacency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo_Adjacency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo_Adjacency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo_Adjacency::MergeFrom(const NodeInfo_Adjacency& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo_Adjacency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_Adjacency::CopyFrom(const NodeInfo_Adjacency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Adjacency::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeInfo_Adjacency::Swap(NodeInfo_Adjacency* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    versions_.Swap(&other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo_Adjacency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_Adjacency_descriptor_;
  metadata.reflection = NodeInfo_Adjacency_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeInfo_Edges::kEdgesFieldNumber;
#endif  // !_MSC_VER

NodeInfo_Edges::NodeInfo_Edges()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo_Edges::InitAsDefaultInstance() {
}

NodeInfo_Edges::NodeInfo_Edges(const NodeInfo_Edges& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo_Edges::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo_Edges::~NodeInfo_Edges() {
  SharedDtor();
}

void NodeInfo_Edges::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeInfo_Edges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo_Edges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_Edges_descriptor_;
}

const NodeInfo_Edges& NodeInfo_Edges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo_Edges* NodeInfo_Edges::default_instance_ = NULL;

NodeInfo_Edges* NodeInfo_Edges::New() const {
  return new NodeInfo_Edges;
}

void NodeInfo_Edges::Clear() {
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo_Edges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .range.db.NodeInfo.Adjacency edges = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_edges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo_Edges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .range.db.NodeInfo.Adjacency edges = 1;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo_Edges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .range.db.NodeInfo.Adjacency edges = 1;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->edges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo_Edges::ByteSize() const {
  int total_size = 0;

  // repeated .range.db.NodeInfo.Adjacency edges = 1;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo_Edges::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo_Edges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo_Edges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo_Edges::MergeFrom(const NodeInfo_Edges& from) {
  GOOGLE_CHECK_NE(&from, this);
  edges_.MergeFrom(from.edges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo_Edges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_Edges::CopyFrom(const NodeInfo_Edges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Edges::IsInitialized() const {

  for (int i = 0; i < edges_size(); i++) {
    if (!this->edges(i).IsInitialized()) return false;
  }
  return true;
}

void NodeInfo_Edges::Swap(NodeInfo_Edges* other) {
  if (other != this) {
    edges_.Swap(&other->edges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo_Edges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_Edges_descriptor_;
  metadata.reflection = NodeInfo_Edges_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeInfo_Tags_KeyValue_Values::kDataFieldNumber;
const int NodeInfo_Tags_KeyValue_Values::kVersionsFieldNumber;
#endif  // !_MSC_VER

NodeInfo_Tags_KeyValue_Values::NodeInfo_Tags_KeyValue_Values()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo_Tags_KeyValue_Values::InitAsDefaultInstance() {
}

NodeInfo_Tags_KeyValue_Values::NodeInfo_Tags_KeyValue_Values(const NodeInfo_Tags_KeyValue_Values& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo_Tags_KeyValue_Values::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo_Tags_KeyValue_Values::~NodeInfo_Tags_KeyValue_Values() {
  SharedDtor();
}

void NodeInfo_Tags_KeyValue_Values::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void NodeInfo_Tags_KeyValue_Values::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo_Tags_KeyValue_Values::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_Tags_KeyValue_Values_descriptor_;
}

const NodeInfo_Tags_KeyValue_Values& NodeInfo_Tags_KeyValue_Values::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo_Tags_KeyValue_Values* NodeInfo_Tags_KeyValue_Values::default_instance_ = NULL;

NodeInfo_Tags_KeyValue_Values* NodeInfo_Tags_KeyValue_Values::New() const {
  return new NodeInfo_Tags_KeyValue_Values;
}

void NodeInfo_Tags_KeyValue_Values::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo_Tags_KeyValue_Values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_versions;
        break;
      }

      // repeated uint64 versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_versions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_versions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_versions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo_Tags_KeyValue_Values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }

  // repeated uint64 versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo_Tags_KeyValue_Values::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // repeated uint64 versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo_Tags_KeyValue_Values::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  // repeated uint64 versions = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->versions(i));
    }
    total_size += 1 * this->versions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo_Tags_KeyValue_Values::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo_Tags_KeyValue_Values* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo_Tags_KeyValue_Values*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo_Tags_KeyValue_Values::MergeFrom(const NodeInfo_Tags_KeyValue_Values& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo_Tags_KeyValue_Values::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_Tags_KeyValue_Values::CopyFrom(const NodeInfo_Tags_KeyValue_Values& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Tags_KeyValue_Values::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeInfo_Tags_KeyValue_Values::Swap(NodeInfo_Tags_KeyValue_Values* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    versions_.Swap(&other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo_Tags_KeyValue_Values::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_Tags_KeyValue_Values_descriptor_;
  metadata.reflection = NodeInfo_Tags_KeyValue_Values_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeInfo_Tags_KeyValue_ListToVersionMap::kListVersionFieldNumber;
const int NodeInfo_Tags_KeyValue_ListToVersionMap::kKeyVersionFieldNumber;
#endif  // !_MSC_VER

NodeInfo_Tags_KeyValue_ListToVersionMap::NodeInfo_Tags_KeyValue_ListToVersionMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::InitAsDefaultInstance() {
}

NodeInfo_Tags_KeyValue_ListToVersionMap::NodeInfo_Tags_KeyValue_ListToVersionMap(const NodeInfo_Tags_KeyValue_ListToVersionMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::SharedCtor() {
  _cached_size_ = 0;
  list_version_ = GOOGLE_ULONGLONG(0);
  key_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo_Tags_KeyValue_ListToVersionMap::~NodeInfo_Tags_KeyValue_ListToVersionMap() {
  SharedDtor();
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo_Tags_KeyValue_ListToVersionMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_Tags_KeyValue_ListToVersionMap_descriptor_;
}

const NodeInfo_Tags_KeyValue_ListToVersionMap& NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo_Tags_KeyValue_ListToVersionMap* NodeInfo_Tags_KeyValue_ListToVersionMap::default_instance_ = NULL;

NodeInfo_Tags_KeyValue_ListToVersionMap* NodeInfo_Tags_KeyValue_ListToVersionMap::New() const {
  return new NodeInfo_Tags_KeyValue_ListToVersionMap;
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    list_version_ = GOOGLE_ULONGLONG(0);
    key_version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo_Tags_KeyValue_ListToVersionMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 list_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &list_version_)));
          set_has_list_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key_version;
        break;
      }

      // required uint64 key_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_version_)));
          set_has_key_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 list_version = 1;
  if (has_list_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->list_version(), output);
  }

  // required uint64 key_version = 2;
  if (has_key_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo_Tags_KeyValue_ListToVersionMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 list_version = 1;
  if (has_list_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->list_version(), target);
  }

  // required uint64 key_version = 2;
  if (has_key_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo_Tags_KeyValue_ListToVersionMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 list_version = 1;
    if (has_list_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->list_version());
    }

    // required uint64 key_version = 2;
    if (has_key_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo_Tags_KeyValue_ListToVersionMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo_Tags_KeyValue_ListToVersionMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::MergeFrom(const NodeInfo_Tags_KeyValue_ListToVersionMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_version()) {
      set_list_version(from.list_version());
    }
    if (from.has_key_version()) {
      set_key_version(from.key_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::CopyFrom(const NodeInfo_Tags_KeyValue_ListToVersionMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Tags_KeyValue_ListToVersionMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NodeInfo_Tags_KeyValue_ListToVersionMap::Swap(NodeInfo_Tags_KeyValue_ListToVersionMap* other) {
  if (other != this) {
    std::swap(list_version_, other->list_version_);
    std::swap(key_version_, other->key_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo_Tags_KeyValue_ListToVersionMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_Tags_KeyValue_ListToVersionMap_descriptor_;
  metadata.reflection = NodeInfo_Tags_KeyValue_ListToVersionMap_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeInfo_Tags_KeyValue::kKeyFieldNumber;
const int NodeInfo_Tags_KeyValue::kKeyVersionFieldNumber;
const int NodeInfo_Tags_KeyValue::kValuesFieldNumber;
const int NodeInfo_Tags_KeyValue::kVersionsFieldNumber;
const int NodeInfo_Tags_KeyValue::kVersionmapFieldNumber;
#endif  // !_MSC_VER

NodeInfo_Tags_KeyValue::NodeInfo_Tags_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo_Tags_KeyValue::InitAsDefaultInstance() {
}

NodeInfo_Tags_KeyValue::NodeInfo_Tags_KeyValue(const NodeInfo_Tags_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo_Tags_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo_Tags_KeyValue::~NodeInfo_Tags_KeyValue() {
  SharedDtor();
}

void NodeInfo_Tags_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void NodeInfo_Tags_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo_Tags_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_Tags_KeyValue_descriptor_;
}

const NodeInfo_Tags_KeyValue& NodeInfo_Tags_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo_Tags_KeyValue* NodeInfo_Tags_KeyValue::default_instance_ = NULL;

NodeInfo_Tags_KeyValue* NodeInfo_Tags_KeyValue::New() const {
  return new NodeInfo_Tags_KeyValue;
}

void NodeInfo_Tags_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    key_version_ = GOOGLE_ULONGLONG(0);
  }
  values_.Clear();
  versions_.Clear();
  versionmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo_Tags_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key_version;
        break;
      }

      // required uint64 key_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_version_)));
          set_has_key_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .range.db.NodeInfo.Tags.KeyValue.Values values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectTag(32)) goto parse_versions;
        break;
      }

      // repeated uint64 versions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_versions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_versions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_versions;
        if (input->ExpectTag(42)) goto parse_versionmap;
        break;
      }

      // repeated .range.db.NodeInfo.Tags.KeyValue.ListToVersionMap versionmap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_versionmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versionmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_versionmap;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo_Tags_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required uint64 key_version = 2;
  if (has_key_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key_version(), output);
  }

  // repeated .range.db.NodeInfo.Tags.KeyValue.Values values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // repeated uint64 versions = 4;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->versions(i), output);
  }

  // repeated .range.db.NodeInfo.Tags.KeyValue.ListToVersionMap versionmap = 5;
  for (int i = 0; i < this->versionmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->versionmap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo_Tags_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required uint64 key_version = 2;
  if (has_key_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key_version(), target);
  }

  // repeated .range.db.NodeInfo.Tags.KeyValue.Values values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // repeated uint64 versions = 4;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->versions(i), target);
  }

  // repeated .range.db.NodeInfo.Tags.KeyValue.ListToVersionMap versionmap = 5;
  for (int i = 0; i < this->versionmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->versionmap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo_Tags_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required uint64 key_version = 2;
    if (has_key_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_version());
    }

  }
  // repeated .range.db.NodeInfo.Tags.KeyValue.Values values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  // repeated uint64 versions = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->versions(i));
    }
    total_size += 1 * this->versions_size() + data_size;
  }

  // repeated .range.db.NodeInfo.Tags.KeyValue.ListToVersionMap versionmap = 5;
  total_size += 1 * this->versionmap_size();
  for (int i = 0; i < this->versionmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versionmap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo_Tags_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo_Tags_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo_Tags_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo_Tags_KeyValue::MergeFrom(const NodeInfo_Tags_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  versions_.MergeFrom(from.versions_);
  versionmap_.MergeFrom(from.versionmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_key_version()) {
      set_key_version(from.key_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo_Tags_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_Tags_KeyValue::CopyFrom(const NodeInfo_Tags_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Tags_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  for (int i = 0; i < versionmap_size(); i++) {
    if (!this->versionmap(i).IsInitialized()) return false;
  }
  return true;
}

void NodeInfo_Tags_KeyValue::Swap(NodeInfo_Tags_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(key_version_, other->key_version_);
    values_.Swap(&other->values_);
    versions_.Swap(&other->versions_);
    versionmap_.Swap(&other->versionmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo_Tags_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_Tags_KeyValue_descriptor_;
  metadata.reflection = NodeInfo_Tags_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeInfo_Tags::kKeysFieldNumber;
#endif  // !_MSC_VER

NodeInfo_Tags::NodeInfo_Tags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo_Tags::InitAsDefaultInstance() {
}

NodeInfo_Tags::NodeInfo_Tags(const NodeInfo_Tags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo_Tags::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo_Tags::~NodeInfo_Tags() {
  SharedDtor();
}

void NodeInfo_Tags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeInfo_Tags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo_Tags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_Tags_descriptor_;
}

const NodeInfo_Tags& NodeInfo_Tags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo_Tags* NodeInfo_Tags::default_instance_ = NULL;

NodeInfo_Tags* NodeInfo_Tags::New() const {
  return new NodeInfo_Tags;
}

void NodeInfo_Tags::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo_Tags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .range.db.NodeInfo.Tags.KeyValue keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo_Tags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .range.db.NodeInfo.Tags.KeyValue keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo_Tags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .range.db.NodeInfo.Tags.KeyValue keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo_Tags::ByteSize() const {
  int total_size = 0;

  // repeated .range.db.NodeInfo.Tags.KeyValue keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo_Tags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo_Tags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo_Tags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo_Tags::MergeFrom(const NodeInfo_Tags& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo_Tags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_Tags::CopyFrom(const NodeInfo_Tags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Tags::IsInitialized() const {

  for (int i = 0; i < keys_size(); i++) {
    if (!this->keys(i).IsInitialized()) return false;
  }
  return true;
}

void NodeInfo_Tags::Swap(NodeInfo_Tags* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo_Tags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_Tags_descriptor_;
  metadata.reflection = NodeInfo_Tags_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeInfo::kListVersionFieldNumber;
const int NodeInfo::kCrc32FieldNumber;
const int NodeInfo::kNodeTypeFieldNumber;
const int NodeInfo::kForwardFieldNumber;
const int NodeInfo::kReverseFieldNumber;
const int NodeInfo::kTagsFieldNumber;
const int NodeInfo::kGraphVersionsFieldNumber;
#endif  // !_MSC_VER

NodeInfo::NodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo::InitAsDefaultInstance() {
  forward_ = const_cast< ::range::db::NodeInfo_Edges*>(&::range::db::NodeInfo_Edges::default_instance());
  reverse_ = const_cast< ::range::db::NodeInfo_Edges*>(&::range::db::NodeInfo_Edges::default_instance());
  tags_ = const_cast< ::range::db::NodeInfo_Tags*>(&::range::db::NodeInfo_Tags::default_instance());
}

NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo::SharedCtor() {
  _cached_size_ = 0;
  list_version_ = GOOGLE_ULONGLONG(0);
  crc32_ = 0u;
  node_type_ = 0u;
  forward_ = NULL;
  reverse_ = NULL;
  tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo::~NodeInfo() {
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
    delete reverse_;
    delete tags_;
  }
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_descriptor_;
}

const NodeInfo& NodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeinfo_2eproto();
  return *default_instance_;
}

NodeInfo* NodeInfo::default_instance_ = NULL;

NodeInfo* NodeInfo::New() const {
  return new NodeInfo;
}

void NodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    list_version_ = GOOGLE_ULONGLONG(0);
    crc32_ = 0u;
    node_type_ = 0u;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::range::db::NodeInfo_Edges::Clear();
    }
    if (has_reverse()) {
      if (reverse_ != NULL) reverse_->::range::db::NodeInfo_Edges::Clear();
    }
    if (has_tags()) {
      if (tags_ != NULL) tags_->::range::db::NodeInfo_Tags::Clear();
    }
  }
  graph_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 list_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &list_version_)));
          set_has_list_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crc32;
        break;
      }

      // required uint32 crc32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc32_)));
          set_has_crc32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_type;
        break;
      }

      // required uint32 node_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_type_)));
          set_has_node_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_forward;
        break;
      }

      // required .range.db.NodeInfo.Edges forward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reverse;
        break;
      }

      // required .range.db.NodeInfo.Edges reverse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reverse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reverse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        break;
      }

      // required .range.db.NodeInfo.Tags tags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_graph_versions;
        break;
      }

      // repeated uint64 graph_versions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_graph_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_graph_versions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_graph_versions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_graph_versions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 list_version = 1;
  if (has_list_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->list_version(), output);
  }

  // required uint32 crc32 = 2;
  if (has_crc32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc32(), output);
  }

  // required uint32 node_type = 3;
  if (has_node_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->node_type(), output);
  }

  // required .range.db.NodeInfo.Edges forward = 4;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->forward(), output);
  }

  // required .range.db.NodeInfo.Edges reverse = 5;
  if (has_reverse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reverse(), output);
  }

  // required .range.db.NodeInfo.Tags tags = 6;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tags(), output);
  }

  // repeated uint64 graph_versions = 7;
  for (int i = 0; i < this->graph_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->graph_versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 list_version = 1;
  if (has_list_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->list_version(), target);
  }

  // required uint32 crc32 = 2;
  if (has_crc32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc32(), target);
  }

  // required uint32 node_type = 3;
  if (has_node_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->node_type(), target);
  }

  // required .range.db.NodeInfo.Edges forward = 4;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->forward(), target);
  }

  // required .range.db.NodeInfo.Edges reverse = 5;
  if (has_reverse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reverse(), target);
  }

  // required .range.db.NodeInfo.Tags tags = 6;
  if (has_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tags(), target);
  }

  // repeated uint64 graph_versions = 7;
  for (int i = 0; i < this->graph_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->graph_versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 list_version = 1;
    if (has_list_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->list_version());
    }

    // required uint32 crc32 = 2;
    if (has_crc32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc32());
    }

    // required uint32 node_type = 3;
    if (has_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_type());
    }

    // required .range.db.NodeInfo.Edges forward = 4;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }

    // required .range.db.NodeInfo.Edges reverse = 5;
    if (has_reverse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reverse());
    }

    // required .range.db.NodeInfo.Tags tags = 6;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags());
    }

  }
  // repeated uint64 graph_versions = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->graph_versions(i));
    }
    total_size += 1 * this->graph_versions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  graph_versions_.MergeFrom(from.graph_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_version()) {
      set_list_version(from.list_version());
    }
    if (from.has_crc32()) {
      set_crc32(from.crc32());
    }
    if (from.has_node_type()) {
      set_node_type(from.node_type());
    }
    if (from.has_forward()) {
      mutable_forward()->::range::db::NodeInfo_Edges::MergeFrom(from.forward());
    }
    if (from.has_reverse()) {
      mutable_reverse()->::range::db::NodeInfo_Edges::MergeFrom(from.reverse());
    }
    if (from.has_tags()) {
      mutable_tags()->::range::db::NodeInfo_Tags::MergeFrom(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_forward()) {
    if (!this->forward().IsInitialized()) return false;
  }
  if (has_reverse()) {
    if (!this->reverse().IsInitialized()) return false;
  }
  if (has_tags()) {
    if (!this->tags().IsInitialized()) return false;
  }
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other != this) {
    std::swap(list_version_, other->list_version_);
    std::swap(crc32_, other->crc32_);
    std::swap(node_type_, other->node_type_);
    std::swap(forward_, other->forward_);
    std::swap(reverse_, other->reverse_);
    std::swap(tags_, other->tags_);
    graph_versions_.Swap(&other->graph_versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_descriptor_;
  metadata.reflection = NodeInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace range

// @@protoc_insertion_point(global_scope)
