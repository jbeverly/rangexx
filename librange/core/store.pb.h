// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store.proto

#ifndef PROTOBUF_store_2eproto__INCLUDED
#define PROTOBUF_store_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace range {
namespace stored {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_store_2eproto();
void protobuf_AssignDesc_store_2eproto();
void protobuf_ShutdownFile_store_2eproto();

class Request;
class Ack;

enum Request_Type {
  Request_Type_REQUEST = 1,
  Request_Type_PREPARE = 2,
  Request_Type_PROPOSE = 4,
  Request_Type_LEARN = 8,
  Request_Type_REPLAY = 16,
  Request_Type_FAILOVER = 32,
  Request_Type_HEARTBEAT = 64
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_REQUEST;
const Request_Type Request_Type_Type_MAX = Request_Type_HEARTBEAT;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Ack_Type {
  Ack_Type_ACK = 1,
  Ack_Type_PROMISE = 2,
  Ack_Type_NACK = 4,
  Ack_Type_ACCEPTED = 8
};
bool Ack_Type_IsValid(int value);
const Ack_Type Ack_Type_Type_MIN = Ack_Type_ACK;
const Ack_Type Ack_Type_Type_MAX = Ack_Type_ACCEPTED;
const int Ack_Type_Type_ARRAYSIZE = Ack_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ack_Type_descriptor();
inline const ::std::string& Ack_Type_Name(Ack_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ack_Type_descriptor(), value);
}
inline bool Ack_Type_Parse(
    const ::std::string& name, Ack_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ack_Type>(
    Ack_Type_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Type Type;
  static const Type REQUEST = Request_Type_REQUEST;
  static const Type PREPARE = Request_Type_PREPARE;
  static const Type PROPOSE = Request_Type_PROPOSE;
  static const Type LEARN = Request_Type_LEARN;
  static const Type REPLAY = Request_Type_REPLAY;
  static const Type FAILOVER = Request_Type_FAILOVER;
  static const Type HEARTBEAT = Request_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 crc = 1;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 1;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // required string client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // required uint64 request_id = 3;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  inline ::google::protobuf::uint64 request_id() const;
  inline void set_request_id(::google::protobuf::uint64 value);

  // required string method = 4;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 4;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // repeated string args = 5;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 5;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // optional uint64 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional .range.stored.Request.Type type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::range::stored::Request_Type type() const;
  inline void set_type(::range::stored::Request_Type value);

  // optional uint64 proposal_num = 8;
  inline bool has_proposal_num() const;
  inline void clear_proposal_num();
  static const int kProposalNumFieldNumber = 8;
  inline ::google::protobuf::uint64 proposal_num() const;
  inline void set_proposal_num(::google::protobuf::uint64 value);

  // optional uint64 proposer_id = 9;
  inline bool has_proposer_id() const;
  inline void clear_proposer_id();
  static const int kProposerIdFieldNumber = 9;
  inline ::google::protobuf::uint64 proposer_id() const;
  inline void set_proposer_id(::google::protobuf::uint64 value);

  // optional uint32 sender_addr = 10;
  inline bool has_sender_addr() const;
  inline void clear_sender_addr();
  static const int kSenderAddrFieldNumber = 10;
  inline ::google::protobuf::uint32 sender_addr() const;
  inline void set_sender_addr(::google::protobuf::uint32 value);

  // optional uint32 sender_port = 11;
  inline bool has_sender_port() const;
  inline void clear_sender_port();
  static const int kSenderPortFieldNumber = 11;
  inline ::google::protobuf::uint32 sender_port() const;
  inline void set_sender_port(::google::protobuf::uint32 value);

  // optional uint64 version = 12;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 12;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // optional uint64 sequence_num = 13;
  inline bool has_sequence_num() const;
  inline void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 13;
  inline ::google::protobuf::uint64 sequence_num() const;
  inline void set_sequence_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:range.stored.Request)
 private:
  inline void set_has_crc();
  inline void clear_has_crc();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_proposal_num();
  inline void clear_has_proposal_num();
  inline void set_has_proposer_id();
  inline void clear_has_proposer_id();
  inline void set_has_sender_addr();
  inline void clear_has_sender_addr();
  inline void set_has_sender_port();
  inline void clear_has_sender_port();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_sequence_num();
  inline void clear_has_sequence_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  ::google::protobuf::uint64 request_id_;
  ::std::string* method_;
  ::google::protobuf::uint32 crc_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 proposal_num_;
  ::google::protobuf::uint64 proposer_id_;
  ::google::protobuf::uint32 sender_addr_;
  ::google::protobuf::uint32 sender_port_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 sequence_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_store_2eproto();
  friend void protobuf_AssignDesc_store_2eproto();
  friend void protobuf_ShutdownFile_store_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  void Swap(Ack* other);

  // implements Message ----------------------------------------------

  Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Ack_Type Type;
  static const Type ACK = Ack_Type_ACK;
  static const Type PROMISE = Ack_Type_PROMISE;
  static const Type NACK = Ack_Type_NACK;
  static const Type ACCEPTED = Ack_Type_ACCEPTED;
  static inline bool Type_IsValid(int value) {
    return Ack_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Ack_Type_Type_MIN;
  static const Type Type_MAX =
    Ack_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Ack_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Ack_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Ack_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Ack_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // required string client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // required uint64 request_id = 3;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  inline ::google::protobuf::uint64 request_id() const;
  inline void set_request_id(::google::protobuf::uint64 value);

  // optional uint32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);

  // optional string reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional .range.stored.Ack.Type type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::range::stored::Ack_Type type() const;
  inline void set_type(::range::stored::Ack_Type value);

  // optional uint64 proposal_num = 7;
  inline bool has_proposal_num() const;
  inline void clear_proposal_num();
  static const int kProposalNumFieldNumber = 7;
  inline ::google::protobuf::uint64 proposal_num() const;
  inline void set_proposal_num(::google::protobuf::uint64 value);

  // optional uint64 proposer_id = 8;
  inline bool has_proposer_id() const;
  inline void clear_proposer_id();
  static const int kProposerIdFieldNumber = 8;
  inline ::google::protobuf::uint64 proposer_id() const;
  inline void set_proposer_id(::google::protobuf::uint64 value);

  // optional uint64 next_proposal_num = 9;
  inline bool has_next_proposal_num() const;
  inline void clear_next_proposal_num();
  static const int kNextProposalNumFieldNumber = 9;
  inline ::google::protobuf::uint64 next_proposal_num() const;
  inline void set_next_proposal_num(::google::protobuf::uint64 value);

  // optional uint64 sequence_num = 10;
  inline bool has_sequence_num() const;
  inline void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 10;
  inline ::google::protobuf::uint64 sequence_num() const;
  inline void set_sequence_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:range.stored.Ack)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_proposal_num();
  inline void clear_has_proposal_num();
  inline void set_has_proposer_id();
  inline void clear_has_proposer_id();
  inline void set_has_next_proposal_num();
  inline void clear_has_next_proposal_num();
  inline void set_has_sequence_num();
  inline void clear_has_sequence_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  bool status_;
  ::google::protobuf::uint32 code_;
  ::google::protobuf::uint64 request_id_;
  ::std::string* reason_;
  ::google::protobuf::uint64 proposal_num_;
  ::google::protobuf::uint64 proposer_id_;
  ::google::protobuf::uint64 next_proposal_num_;
  ::google::protobuf::uint64 sequence_num_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_store_2eproto();
  friend void protobuf_AssignDesc_store_2eproto();
  friend void protobuf_ShutdownFile_store_2eproto();

  void InitAsDefaultInstance();
  static Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required uint32 crc = 1;
inline bool Request::has_crc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_crc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_crc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 Request::crc() const {
  return crc_;
}
inline void Request::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// required string client_id = 2;
inline bool Request::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& Request::client_id() const {
  return *client_id_;
}
inline void Request::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void Request::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void Request::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* Request::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 request_id = 3;
inline bool Request::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::uint64 Request::request_id() const {
  return request_id_;
}
inline void Request::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
}

// required string method = 4;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  return *method_;
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Request::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string args = 5;
inline int Request::args_size() const {
  return args_.size();
}
inline void Request::clear_args() {
  args_.Clear();
}
inline const ::std::string& Request::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* Request::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void Request::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void Request::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void Request::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::add_args() {
  return args_.Add();
}
inline void Request::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void Request::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void Request::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_args() {
  return &args_;
}

// optional uint64 timestamp = 6;
inline bool Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Request::timestamp() const {
  return timestamp_;
}
inline void Request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .range.stored.Request.Type type = 7;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::range::stored::Request_Type Request::type() const {
  return static_cast< ::range::stored::Request_Type >(type_);
}
inline void Request::set_type(::range::stored::Request_Type value) {
  assert(::range::stored::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 proposal_num = 8;
inline bool Request::has_proposal_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_proposal_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_proposal_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_proposal_num() {
  proposal_num_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal_num();
}
inline ::google::protobuf::uint64 Request::proposal_num() const {
  return proposal_num_;
}
inline void Request::set_proposal_num(::google::protobuf::uint64 value) {
  set_has_proposal_num();
  proposal_num_ = value;
}

// optional uint64 proposer_id = 9;
inline bool Request::has_proposer_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_proposer_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_proposer_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_proposer_id() {
  proposer_id_ = GOOGLE_ULONGLONG(0);
  clear_has_proposer_id();
}
inline ::google::protobuf::uint64 Request::proposer_id() const {
  return proposer_id_;
}
inline void Request::set_proposer_id(::google::protobuf::uint64 value) {
  set_has_proposer_id();
  proposer_id_ = value;
}

// optional uint32 sender_addr = 10;
inline bool Request::has_sender_addr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_sender_addr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_sender_addr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_sender_addr() {
  sender_addr_ = 0u;
  clear_has_sender_addr();
}
inline ::google::protobuf::uint32 Request::sender_addr() const {
  return sender_addr_;
}
inline void Request::set_sender_addr(::google::protobuf::uint32 value) {
  set_has_sender_addr();
  sender_addr_ = value;
}

// optional uint32 sender_port = 11;
inline bool Request::has_sender_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::set_has_sender_port() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Request::clear_has_sender_port() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Request::clear_sender_port() {
  sender_port_ = 0u;
  clear_has_sender_port();
}
inline ::google::protobuf::uint32 Request::sender_port() const {
  return sender_port_;
}
inline void Request::set_sender_port(::google::protobuf::uint32 value) {
  set_has_sender_port();
  sender_port_ = value;
}

// optional uint64 version = 12;
inline bool Request::has_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Request::set_has_version() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Request::clear_has_version() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Request::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 Request::version() const {
  return version_;
}
inline void Request::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
}

// optional uint64 sequence_num = 13;
inline bool Request::has_sequence_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Request::set_has_sequence_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Request::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Request::clear_sequence_num() {
  sequence_num_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::uint64 Request::sequence_num() const {
  return sequence_num_;
}
inline void Request::set_sequence_num(::google::protobuf::uint64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
}

// -------------------------------------------------------------------

// Ack

// required bool status = 1;
inline bool Ack::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ack::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ack::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ack::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool Ack::status() const {
  return status_;
}
inline void Ack::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// required string client_id = 2;
inline bool Ack::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ack::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ack::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ack::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& Ack::client_id() const {
  return *client_id_;
}
inline void Ack::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void Ack::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void Ack::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ack::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* Ack::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ack::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 request_id = 3;
inline bool Ack::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ack::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ack::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ack::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::uint64 Ack::request_id() const {
  return request_id_;
}
inline void Ack::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
}

// optional uint32 code = 4;
inline bool Ack::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ack::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ack::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ack::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 Ack::code() const {
  return code_;
}
inline void Ack::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
}

// optional string reason = 5;
inline bool Ack::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ack::set_has_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ack::clear_has_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ack::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& Ack::reason() const {
  return *reason_;
}
inline void Ack::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void Ack::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void Ack::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ack::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* Ack::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ack::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .range.stored.Ack.Type type = 6;
inline bool Ack::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ack::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ack::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::range::stored::Ack_Type Ack::type() const {
  return static_cast< ::range::stored::Ack_Type >(type_);
}
inline void Ack::set_type(::range::stored::Ack_Type value) {
  assert(::range::stored::Ack_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 proposal_num = 7;
inline bool Ack::has_proposal_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ack::set_has_proposal_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ack::clear_has_proposal_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ack::clear_proposal_num() {
  proposal_num_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal_num();
}
inline ::google::protobuf::uint64 Ack::proposal_num() const {
  return proposal_num_;
}
inline void Ack::set_proposal_num(::google::protobuf::uint64 value) {
  set_has_proposal_num();
  proposal_num_ = value;
}

// optional uint64 proposer_id = 8;
inline bool Ack::has_proposer_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ack::set_has_proposer_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ack::clear_has_proposer_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ack::clear_proposer_id() {
  proposer_id_ = GOOGLE_ULONGLONG(0);
  clear_has_proposer_id();
}
inline ::google::protobuf::uint64 Ack::proposer_id() const {
  return proposer_id_;
}
inline void Ack::set_proposer_id(::google::protobuf::uint64 value) {
  set_has_proposer_id();
  proposer_id_ = value;
}

// optional uint64 next_proposal_num = 9;
inline bool Ack::has_next_proposal_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ack::set_has_next_proposal_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ack::clear_has_next_proposal_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ack::clear_next_proposal_num() {
  next_proposal_num_ = GOOGLE_ULONGLONG(0);
  clear_has_next_proposal_num();
}
inline ::google::protobuf::uint64 Ack::next_proposal_num() const {
  return next_proposal_num_;
}
inline void Ack::set_next_proposal_num(::google::protobuf::uint64 value) {
  set_has_next_proposal_num();
  next_proposal_num_ = value;
}

// optional uint64 sequence_num = 10;
inline bool Ack::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ack::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ack::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ack::clear_sequence_num() {
  sequence_num_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::uint64 Ack::sequence_num() const {
  return sequence_num_;
}
inline void Ack::set_sequence_num(::google::protobuf::uint64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stored
}  // namespace range

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::range::stored::Request_Type>() {
  return ::range::stored::Request_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::range::stored::Ack_Type>() {
  return ::range::stored::Ack_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_store_2eproto__INCLUDED
